---
title: "QC and cut-off values"
author: "Pauline"
date: today
format: 
    html:
        self-contained: true
        toc: true
editor: source
editor_options: 
  chunk_output_type: console
---

## Load packages
```{r, warning=FALSE, message=FALSE}

library(SpatialExperiment)
library(SpatialExperimentIO)
library(SingleCellExperiment)
library(Seurat)
library(scater)
library(harmony)
library(InSituType)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(ggpubr)
library(ggExtra)

```

## Read in data and remove `SystemControlX` and `NegativeX` from Genes
It is useful to count how many negative controls are being used, because this number will be used to calculate each cell’s mean negative control value. In this set of experiments there should be 20 negative controls present (to check: *sum(grepl("^Negative", rownames(cos_spe)))*)
```{r, warning=FALSE, message=FALSE}

cos_path <- "C:/CosMx/Datasets/6k/TMA2" # Adjust file path if necessary

cos_spe <- readCosmxSXE(dirName = cos_path,
                        countMatPattern = "TMA2_biomedx_MAR_6K_exprMat_file.csv",
                        metaDataPattern = "TMA2_biomedx_MAR_6K_metadata_file.csv",
                        coordNames = c("CenterX_global_px", "CenterY_global_px")
)

cos_spe <- cos_spe[!grepl("^(Negative|SystemControl)", rownames(cos_spe)), ]

```

## Assign patient groups
```{r, warning=FALSE, message=FALSE}

fov_df = data.frame(fov = colData(cos_spe)$fov)

group_assignment <- fov_df %>%
  mutate(group = case_when(
    fov >= 1 & fov <= 37 ~ "anti-TNF-IR",
    fov >= 38 & fov <= 87 ~ "Tx-naive-1",
    fov >= 88 & fov <= 105 ~ "Tx-naive-2",
    fov >= 106 & fov <= 162 ~ "csDMARD-IR"
  ))

colData(cos_spe)$group <- group_assignment$group

slice_assignment <- fov_df %>%
  mutate(slice = case_when(
    fov >= 1 & fov <= 37 ~ "slice_1_TL",
    fov >= 38 & fov <= 87 ~ "slice_2_TR",
    fov >= 88 & fov <= 105 ~ "slice_3_BL",
    fov >= 106 & fov <= 162 ~ "slice_4_BR"
  ))

colData(cos_spe)$slice <- group_assignment$slice

```

## Preparation for QC (add metrics)
```{r, warning=FALSE, message=FALSE}

# Calculate the fraction of negative control counts per cell
colData(cos_spe)$Neg_fraction <- 
  colData(cos_spe)$nCount_negprobes / colData(cos_spe)$nCount_RNA

# Calculate RNA complexity (total counts divided by detected genes)
colData(cos_spe)$Complexity <- 
  colData(cos_spe)$nCount_RNA / colData(cos_spe)$nFeature_RNA

# Identify cells with extreme area values (outliers)

grubbs.flag <- function(numbers,p) {
  outliers <- NULL
  test <- numbers
  grubbs.result <- grubbs.test(test)
  pv <- grubbs.result$p.value

  while(pv < p) {
    outliers <- c(outliers,as.numeric(strsplit(grubbs.result$alternative," ")[[1]][3]))
    test <- numbers[!numbers %in% outliers]
    grubbs.result <- grubbs.test(test)
    pv <- grubbs.result$p.value
  }
  return(data.frame(X=numbers,Outlier=(numbers %in% outliers)))
}

area_outliers <- grubbs.flag(colData(cos_spe)$Area, 0.01)
colData(cos_spe)$Outlier <- area_outliers$Outlier
```

## Filter cells according to QC and add to metadata
```{r, warning=FALSE, message=FALSE}

high_quality_cells <- (
  colData(cos_spe)$nCount_RNA >= 50 &  # Minimum counts per cell
    colData(cos_spe)$Neg_fraction <= 0.1 &  # Negative probe fraction
    colData(cos_spe)$Complexity > 1 &  # Complexity threshold
    colData(cos_spe)$Outlier == FALSE # Exclude area outliers
)

colData(cos_spe)$to_keep <- high_quality_cells

```

## QC exploration plots
```{r, warning=FALSE, message=FALSE}

nCount_RNA_plot <- 
  ggplot(colData(cos_spe), aes(x = nCount_RNA)) +
  
  # Adjust amount of bins or use geom_density for more or less details
  geom_density(fill = "blue", colour = "blue", alpha = 0.1) +
  
  # Change intercept to check cut-off values (e.g., "50")
  geom_vline(xintercept = 50, color = "red") + 
  annotate("text", 
    label="Cutoff: Total counts < 50", 
    x=120, 
    y=0.0006, 
    angle=90, 
    size=3.5, 
    color="red") +
  
  xlim(0, 2000) +
  
  # Turn on/off to check for individual groups
  # facet_wrap(vars(group)) +
  
  labs(title = "Total transcript counts per cell (density)", 
       x = "Transcript count", 
       y = NULL) +
  
  theme(plot.title = element_text(face = "bold"))

```

```{r, warning=FALSE, message=FALSE}

nCount_RNA_grouped <- 
  ggplot(colData(cos_spe), aes(x = factor(group), y = nCount_RNA)) +
  geom_boxplot(fill = "blue", alpha = 0.5) +
  
  labs(title = "Total transcript counts per cell (grouped)", 
       x = NULL, 
       y = "Transcript count per cell") +
  
  theme(plot.title = element_text(face = "bold"))

```

```{r, warning=FALSE, message=FALSE}

Neg_fraction_plot <- 
  ggplot(colData(cos_spe), aes(x = Neg_fraction)) +
  geom_histogram(binwidth = 0.01, fill = "purple", color = "purple", alpha = 0.6) +
  
  # Change intercept to check cut-off values (e.g., "50")
  geom_vline(xintercept = 0.1, linetype = "dashed", color = "red") +
  
  annotate("text", 
    label="~0.0006% of cells > 0.01", 
    x=0.2, 
    y=40000, 
    size=4.5, 
    color="red") +
  
  # Turn on/off to check for individual groups
  # facet_wrap(vars(group)) +
  
  labs(title = "Negative fraction",
       x = "Negative count / total transcript count", 
       y = NULL) +
  
  theme(plot.title = element_text(face = "bold"))

```

```{r, warning=FALSE, message=FALSE}

Outlier_base <- 
  ggplot(colData(cos_spe), aes(x = nCount_RNA, y = Area.um2, color = Outlier)) +
  geom_point(alpha = 0.5) +
  scale_color_manual(values = c("blue", "red")) +
  
  labs(title = "Cell areas", 
       x = "Total count", 
       y = "Area [µm²]") +

  theme_minimal() +
  theme(plot.title = element_text(face = "bold"))

Outlier_plot <- ggMarginal(
  Outlier_base, type = "densigram", margins = "y"
  )

```

```{r, warning=FALSE, message=FALSE}

Complexity_plot <- 
  ggplot(colData(cos_spe), aes(x = nCount_RNA, y = nFeature_RNA, color = to_keep)) +
  geom_point(alpha = 0.5) +
  scale_color_manual(values = c("blue", "red")) +
  
  labs(title = "Complexity", 
       x = "Total counts", 
       y = "Detected genes") +
  
  scale_x_log10() +
  scale_y_log10() +
  geom_density_2d(color = "black", alpha = 0.5) +

  theme_minimal() +
  theme(plot.title = element_text(face = "bold"))

```

```{r, warning=FALSE, message=FALSE}

Spatial_filter <- 
  ggplot(spatialCoords(cos_spe), aes(
    x = CenterX_global_px, 
    y = CenterY_global_px, 
    color = colData(cos_spe)$to_keep)) +
  geom_point(size = 0.5) +
  scale_color_manual(values = c("blue", "red")) +
  
  labs(title = "Overview: Which cells are kept?", 
       x = "X-coordinate", 
       y = "Y-coordinate",
       color = "to_keep") +
  
  theme_minimal() +
  theme(plot.title = element_text(face = "bold"))

ggsave("Spatial_filter.tiff",
       path = file.path(cos_path, "QC"),
       compression = 'lzw')

```


### Save figures to TMA folder
```{r, warning=FALSE, message=FALSE}

Figure1 <- ggarrange(nCount_RNA_plot, nCount_RNA_grouped, 
                     labels = c("A", "B"),
                     ncol = 2, nrow = 1) 
Figure1

ggsave("Total transcript counts per cell.tiff",
       path = file.path(cos_path, "QC"),
       compression = 'lzw')

```

```{r, warning=FALSE, message=FALSE}

Figure2 <- ggarrange(Neg_fraction_plot, Complexity_plot,
                     labels = c("C", "D"))

Figure2

ggsave("NegFrac and Complexity.tiff",
       path = file.path(cos_path, "QC"),
       compression = 'lzw')

```

```{r, warning=FALSE, message=FALSE}

Figure3 <- ggarrange(Outlier_plot,
                     labels = "E")

Figure3

ggsave("Complexity.tiff",
       path = file.path(cos_path, "QC"),
       compression = 'lzw')

```

```{r, warning=FALSE, message=FALSE}

Report <- ggarrange(Figure1, Figure2, Figure3, 
                    ncol = 1, nrow = 3) 

ggsave("Summary.pdf",
       path = file.path(cos_path, "QC"),
       units = "mm", 
       width = 210,
       height = 297)

```


## Subset the `SpatialExperiment` object to retain high-quality cells
```{r, warning=FALSE, message=FALSE}

cos_spe_filtered <- cos_spe[, high_quality_cells]

# Save the final SpatialExperiment objects for further use
saveRDS(cos_spe_filtered, file.path(cos_path, "rds files/cos_spe_filtered.rds"))

```

```{r}
sessionInfo()
```
---
title: "CosMx data analysis"
author: "Pauline"
date: today
format: 
    html:
        self-contained: true
        toc: true
editor: source
editor_options: 
  chunk_output_type: console
---

## Load packages

```{r, warning=FALSE, message=FALSE}

library(SpatialExperiment)
library(SpatialExperimentIO)
library(SingleCellExperiment)
library(Seurat)
library(dplyr)
library(ggplot2)
library(InSituType)
library(patchwork)

```

## Read in data

```{r, warning=FALSE, message=FALSE}

cos_path <- "C:/CosMx/Data/6k/TMA2"

cos_spe <- readCosmxSXE(dirName = cos_path,
                        countMatPattern = "TMA2_biomedx_MAR_6K_exprMat_file.csv",
                        metaDataPattern = "TMA2_biomedx_MAR_6K_metadata_file.csv",
                        coordNames = c("CenterX_global_px", "CenterY_global_px")
)

```

## Preparation for QC (add metrics)

```{r, warning=FALSE, message=FALSE}

# Calculate total RNA counts per cell
colData(cos_spe)$total_counts <- colSums(assay(cos_spe))

# Calculate the number of genes detected per cell
colData(cos_spe)$detected_genes <- colSums(assay(cos_spe) > 0)

# Calculate the number of negative control counts per cell
colData(cos_spe)$negative_counts <- colSums(assay(cos_spe)[grepl("Negative", rownames(cos_spe)), ])

# Calculate the fraction of negative control counts per cell
colData(cos_spe)$negative_fraction <- colData(cos_spe)$negative_counts / colData(cos_spe)$total_counts

# Calculate RNA complexity (total counts divided by detected genes)
colData(cos_spe)$complexity <- colData(cos_spe)$total_counts / colData(cos_spe)$detected_genes

# Identify cells with extreme area values (outliers)
colData(cos_spe)$outlier <- colData(cos_spe)$Area > quantile(colData(cos_spe)$Area, 0.99) | 
  colData(cos_spe)$Area < quantile(colData(cos_spe)$Area, 0.01)

```

## Filter cells according to QC

```{r}

high_quality_cells <- (
  colData(cos_spe)$total_counts >= 50 &  # Minimum counts per cell
    colData(cos_spe)$negative_fraction <= 0.1 &  # Negative probe fraction
    colData(cos_spe)$complexity > 1 &  # Complexity threshold
    colData(cos_spe)$outlier == FALSE # Exclude area outliers
)

```

## Subset the `SpatialExperiment` object to retain high-quality cells

```{r}

cos_spe_filtered <- cos_spe[, high_quality_cells]

```

## Filter genes (remove `SystemControlX` and `NegativeX`)

```{r}

cos_spe_final <- cos_spe_filtered[!grepl("^(Negative|SystemControl)", rownames(cos_spe_filtered)), ]

```

## Create `SeuratObject` from `SpatialExperiment`

```{r}

counts <- assay(cos_spe_final, "counts") # Expression matrix
meta_data <- as.data.frame(colData(cos_spe_final)) # Metadata
spatial_coords <- as.data.frame(spatialCoords(cos_spe_final)) # Spatial coordinates
colnames(spatial_coords) <- c("spatial_1", "spatial_2")

cos_seurat <- CreateSeuratObject(
  counts = counts,     
  meta.data = meta_data    
)

```

## Data processing, PCA and UMAP with Seurat

```{r, warning=FALSE, message=FALSE}

# Normalize the data
cos_seurat <- NormalizeData(cos_seurat)

# Identify variable features
cos_seurat <- FindVariableFeatures(cos_seurat)

# Scale data
cos_seurat <- ScaleData(cos_seurat)

# Run PCA
cos_seurat <- RunPCA(cos_seurat, npcs = 30)

# Run UMAP and cluster analysis
cos_seurat <- RunUMAP(cos_seurat, dims = 1:30)
cos_seurat <- FindNeighbors(cos_seurat, dims = 1:30)
cos_seurat <- FindClusters(cos_seurat, resolution = 0.4) # Adjust resolution to achieve ~n_clusters

# Plot UMAP and clusters
UMAP <- DimPlot(cos_seurat, reduction = "umap", label = TRUE)

# Adding spatial info to the SeuratObject
cos_seurat[["spatial"]] <- CreateDimReducObject(
  embeddings = as.matrix(spatial_coords),
  key = "spatial_",
  assay = "RNA"
)

# Plot clusters with spatial context
spatial_clusters <- DimPlot(cos_seurat, reduction = "spatial", label = FALSE)

```

```{r}

UMAP
spatial_clusters

```

## Testing markers from paper

> Lima, J. D. *et al.* Spatial mapping of rheumatoid arthritis synovial niches reveals specific macrophage networks associated with response to therapy. 2023.10.20.563040 <https://doi.org/10.1101/2023.10.20.563040> (2023).

```{r, warning=FALSE, message=FALSE}

mono_macro <- FeaturePlot(
  cos_seurat, 
  features = c("CD14", "FCGR3A", "CD68", "AIF1", "C1QA"), 
  reduction = "umap"
)

resident_macro <- FeaturePlot(
  cos_seurat, 
  features = c("CD163", "MRC1", "MERTK", "LYVE1"), 
  reduction = "umap"
)

inflam_macro <- FeaturePlot(
  cos_seurat, 
  features = c("ITGAX", "S100A12", "IL1B", "CCR2", "IFI6", "CLEC10A"), 
  reduction = "umap"
)

```

```{r}

mono_macro
resident_macro
inflam_macro

```

## Supervised cell typing with InSituType

### Cluster markers

```{r, warning=FALSE, message=FALSE}

cluster_markers <- FindAllMarkers(cos_seurat, only.pos = TRUE)

top_markers <- cluster_markers %>%
  group_by(cluster) %>%
  filter(p_val_adj < 0.05) %>%  # Filter significant markers
  arrange(cluster, desc(avg_log2FC)) %>%  # Sort by cluster and log2FC
  top_n(n = 5, wt = avg_log2FC)  # Select top 5 markers per cluster

```

### Prepare negative mean

```{r, warning=FALSE, message=FALSE}

neg_probes_present <- grepl("^Negative", rownames(cos_spe_filtered))
cat("Number of negative probes in cos_spe_filtered:", sum(neg_probes_present), "\n")

# Compute mean negative control counts per cell
negmean <- as.matrix(colMeans(assay(cos_spe_filtered)[neg_probes_present, ]))

```

### Fast cohorting

```{r}

cohort <- fastCohorting(cos_seurat@meta.data[, colnames(cos_seurat@meta.data) %>% 
  grep("Max|Mean", ., value = TRUE)], gaussian_transform = TRUE)

table(cohort)

```

### Clustering

```{r, warning=FALSE, message=FALSE}

counts_celltyping <- assay(cos_spe_final, "counts") %>% t()
data("ioprofiles")
data("iocolors")

unsup_clusters <- insitutype(
  x = counts_celltyping,
  neg = negmean,
  #assay_type = "RNA",
  reference_profiles = ioprofiles,
  update_reference_profiles = TRUE,
  cohort = cohort,
  # Enter your own per-cell background estimates here if you have them;
  # otherwise insitutype will use the negprobes to estimate background for you.
  bg = NULL,
  # condensed to save time. n_clusts = 5:20 would be more optimal
  n_clusts = 10:20,
  # NULL value runs unsupervised clustering; entering a matrix here would run
  # semi-supervised clustering.
  n_phase1 = 200,
  n_phase2 = 500,
  n_phase3 = 2000,
  n_starts = 1,
  max_iters = 5
)

```

```{r}

str(unsup_clusters)

IST_heatmap <- heatmap(sweep(unsup_clusters$profiles, 1, pmax(apply(unsup_clusters$profiles, 1, max), .2), "/"), scale = "none",
        main = "Cluster mean expression profiles")

IST_heatmap

```

```{r}

cols <-
  c('#8DD3C7',
    '#BEBADA',
    '#FB8072',
    '#80B1D3',
    '#FDB462',
    '#B3DE69',
    '#FCCDE5',
    '#D9D9D9',
    '#BC80BD',
    '#CCEBC5',
    '#FFED6F',
    '#E41A1C',
    '#377EB8',
    '#4DAF4A',
    '#984EA3',
    '#FF7F00',
    '#FFFF33',
    '#A65628',
    '#F781BF',
    '#999999'
  )
cols <- cols[seq_along(unique(unsup_clusters$clust))]
names(cols) <- unique(unsup_clusters$clust)

par(mfrow = c(1, 2))
par(mar = c(0, 0, 3, 0))

plot(cos_seurat@reductions[["umap"]]@cell.embeddings, pch = 20, cex = .75, asp = 1, cex.main = 0.75,
          main = "cells in UMAP space",
     col = cols[unsup_clusters$clust], xlab = "", ylab = "", xaxt = "n", yaxt = "n")

plot(cos_seurat@reductions[["spatial"]]@cell.embeddings[,1], cos_seurat@reductions[["spatial"]]@cell.embeddings[,2], pch = 20, cex = .75, asp = 1, cex.main = 0.75, 
     main = "cells in pyhsical space",
     col = cols[unsup_clusters$clust], xlab = "", ylab = "", xaxt = "n", yaxt = "n")
legend("center", pch = 16, col = cols, legend = names(cols), cex = 0.7)

```

### Analyzing FOVs (Patient groups)

```{r}

fov_groups <- list(
  "anti-TNF-IR" = 1:37,
  "Tx-naïve_1"  = 38:87,
  "Tx-naïve_2"  = 88:105,
  "csDMARD-IR"  = 106:162
)

cos_spe_tissues <- lapply(names(fov_groups), function(group) {
  cos_spe_final[, colData(cos_spe_final)$fov %in% fov_groups[[group]]]
})

names(cos_spe_tissues) <- names(fov_groups)

```

```{r}

for (group in names(cos_spe_tissues)) {
  tissue_coords <- as.data.frame(spatialCoords(cos_spe_tissues[[group]]))
  colnames(tissue_coords) <- c("x", "y")
  
  plot(ggplot(tissue_coords, aes(x = x, y = y)) +
    geom_point(alpha = 0.5, color = "blue") +
    ggtitle(paste("FOV Group:", group)) +
    theme_minimal())
}

```

## To-Do

-   [x] REMOVE System Controls and Negative Probes!
-   [ ] Have a look at this <https://github.com/cancerbioinformatics/CosMx_Lite>
-   [ ] Organize directory structure
-   [ ] Figure out relevant cell types (ask Janine, literature)
-   [ ] Figure out InSituType
-   [ ] For visualizations: How to add images? Polygons?
-   [ ] Refinement of parameters etc.

## session info

```{r}
sessionInfo()
```
